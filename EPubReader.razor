@inject IHttpClientFactory HttpClientFactory

Welcome to EpubReader

@if (Book != null)
{
    <div>got a book</div>
    <div>
        Title: @Book.Title <br />
        Author: @Book.Author
    </div>

    <div class="d-flex flex-row">
        <div>
            Navigation
            <EPubNavigation Navigation="Book.Navigation" OnNavigation="Navigate" />

        </div>
        @*
    <div>

    @foreach (var order in Book.ReadingOrder)
    {
    <div>@order.FilePath</div>
    }
    </div>

    <div>
    local
    @foreach (var file in Book.Content.AllFiles.Local)
    {
    <div>@file.FilePath</div>
    }
    </div>
    <div>
    remote
    @foreach (var file in Book.Content.AllFiles.Remote)
    {
    <div>@file.Url</div>
    }
    </div>

    <div>
    @Book.ReadingOrder[2].Content
    </div> *@

        <EPubContent Book="@Book" NavItem="@CurrentChapter" />

    </div>
}

@code {

    [Parameter] public string Url { get; set; }

    EpubBook? Book;
    EpubNavigationItem? CurrentChapter;
    protected override async Task OnInitializedAsync()
    {
        Book = await GetBookFromUrlAsync(Url);
        // display book
    }

    private async Task<EpubBook> GetBookFromUrlAsync(string url)
    {
        using (var httpClient = HttpClientFactory.CreateClient())
        {
            using (var stream = await httpClient.GetStreamAsync(url))
            {
                var book = await EpubReader.ReadBookAsync(stream);
                return book;

            }
        }
    }

    private async Task Navigate(EpubNavigationItem nav)
    {
        CurrentChapter = nav;
    }
}