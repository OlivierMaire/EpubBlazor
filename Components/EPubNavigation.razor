@using VersOne.Epub
@using Microsoft.AspNetCore.Components.Routing
@using MudBlazor
@using EPubBlazor.Services
@inject NavigationManager NavManager
@inject EPubNavigationService navService
<div>
@if (Navigation != null)
{
    @for (int i = 0; i < Navigation.Count; i++)
    {
        var index = i;
        @if (Navigation[index].NestedItems != null && Navigation[index].NestedItems.Count > 0)
        {
            <MudNavGroup Expanded="true" Title="@Navigation[index].Title" OnClick="() => OpenChapter(index)">
                <EPubNavigation Navigation="@Navigation[index].NestedItems" Level="@(Level + $",{index}")" />
            </MudNavGroup>
        }
        else
        {
            <MudNavLink Match="NavLinkMatch.Prefix" Class="@IsCurrentChapter(index)" OnClick="() => OpenChapter(index)">
                @Navigation[index].Title 
            </MudNavLink>
        }
    }
}
</div>
@code {
    [Parameter] public EpubBook? Book { get; set; }
    [Parameter] public List<EpubNavigationItem>? Navigation { get; set; }
    [Parameter] public string Level { get; set; } = "0";

    private Models.Position? CurrentPosition {get;set;} =  null;

       protected override void OnAfterRender(bool firstRender)
    {
          if (firstRender)
          {
            navService.PositionChanged += OnPositionChanged; 
          }
        } 

           public void OnPositionChanged(Models.Position position)
        {
            CurrentPosition = position;
            StateHasChanged();
        }

    private void OpenChapter(int index)
    {
        var position = GetPosition(index);
        if (position != null)
            navService.SetPosition(position);
    }

    private string GetHref(int index)
    {
        var position = GetPosition(index);
        if (position != null)
        {
            var href = navService.GetUrlForPosition(position);
            return href ?? string.Empty;
        }
        return string.Empty;
    }

    private Models.Position? GetPosition(int index)
    {
        if (Book == null || Navigation == null)
            return null;

        // find position in read order
        var readingOrder = Book.ReadingOrder.FirstOrDefault(ro => ro.Key == Navigation[index].Link?.ContentFileUrl);
        if (readingOrder == null)
            return null;

        var roIndex = Book.ReadingOrder.IndexOf(readingOrder);
        var position = new Models.Position(Level, roIndex, 0);
        return position;
    }

    private string IsCurrentChapter(int index)
    {

      
         var level = Level + $",{index}";
        level = level.Substring(2); // remove 0, from the begining;


        @* int[] levels = level.Split(",")
        .Select(c => { int.TryParse(c, System.Globalization.CultureInfo.InvariantCulture, out var id); return id; }).ToArray(); *@

        if (this.CurrentPosition == null)
            CurrentPosition = navService.GetPosition();
        if (CurrentPosition.NavigationLevel == level ) //.NavigationItemIndex.SequenceEqual(levels))
        {
            return "active";
        }

        return string.Empty;

    }
}